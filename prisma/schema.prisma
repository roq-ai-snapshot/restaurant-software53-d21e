generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model menu_category {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String      @db.VarChar(255)
  restaurant_id String      @db.Uuid
  restaurant    restaurant  @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menu_item     menu_item[]
}

model menu_item {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String        @db.VarChar(255)
  description   String?       @db.VarChar(255)
  price         Int
  category_id   String        @db.Uuid
  menu_category menu_category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_item    order_item[]
}

model order {
  id                   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status               String       @db.VarChar(255)
  special_instructions String?      @db.VarChar(255)
  customer_id          String       @db.Uuid
  restaurant_id        String       @db.Uuid
  user                 user         @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant           restaurant   @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_item           order_item[]
}

model order_item {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  menu_item_id String    @db.Uuid
  order_id     String    @db.Uuid
  menu_item    menu_item @relation(fields: [menu_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order        order     @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reservation {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date          DateTime   @db.Date
  time          DateTime   @db.Time(6)
  party_size    Int
  customer_id   String     @db.Uuid
  restaurant_id String     @db.Uuid
  user          user       @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurant {
  id                  String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String             @db.VarChar(255)
  location            String             @db.VarChar(255)
  contact_information String             @db.VarChar(255)
  operating_hours     String             @db.VarChar(255)
  owner_id            String             @db.Uuid
  menu_category       menu_category[]
  order               order[]
  reservation         reservation[]
  user                user               @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  table_assignment    table_assignment[]
}

model table_assignment {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  table_number  Int
  status        String     @db.VarChar(255)
  waiter_id     String     @db.Uuid
  restaurant_id String     @db.Uuid
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user       @relation(fields: [waiter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role             String             @db.VarChar(255)
  name             String             @db.VarChar(255)
  email            String             @unique @db.VarChar(255)
  password         String             @db.VarChar(255)
  roq_user_id      String?            @db.VarChar(255)
  tenant_id        String?            @db.VarChar(255)
  order            order[]
  reservation      reservation[]
  restaurant       restaurant[]
  table_assignment table_assignment[]
}
